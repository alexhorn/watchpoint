from socketserver import ThreadingTCPServer, BaseRequestHandler
from threading import Thread
from time import sleep
from unittest import TestCase
from .telnet_cred import TelnetCredentialChecker

ADDRESS = "127.0.0.1"
PORT = 0
TIMEOUT = 5
VALID_USERNAME = "admin"
VALID_PASSWORD = "admin"
INVALID_USERNAME = "nope"
INVALID_PASSWORD = "nope"

class _TelnetRequestHandler(BaseRequestHandler):
    def handle(self):
        self.request.send(b"login: ")
        username = b""
        while True:
            username = username + self.request.recv(4096)
            if b"\n" in username:
                break
        
        self.request.send(b"password: ")
        password = b""
        while True:
            password = password + self.request.recv(4096)
            if b"\n" in password:
                break
        
        if username[:-1].decode("utf-8") == self.server.telnet_username and password[:-1].decode("utf-8") == self.server.telnet_password:
            self.request.send(b"Last login: 2019-01-01 00:00\nroot@localhost:~$ ")
        else:
            self.request.send(b"Login incorrect")

class _TelnetNoUsernamePasswordRequestHandler(BaseRequestHandler):
    def handle(self):
        self.request.send(b"Last login: 2019-01-01 00:00\nroot@localhost:~$ ")

class _NotTelnetRequestHandler(BaseRequestHandler):
    def handle(self):
        self.request.send(b"Not a telnet server")

class TestTelnetCredsScanner(TestCase):
    def test_success(self):
        server = ThreadingTCPServer((ADDRESS, PORT), _TelnetRequestHandler)
        try:
            _, port = server.server_address
            self.port = port

            server.telnet_username = VALID_USERNAME
            server.telnet_password = VALID_PASSWORD

            thread = Thread(target=server.serve_forever)
            thread.start()

            ch = TelnetCredentialChecker()
            self.assertTrue(ch.check(ADDRESS, self.port))
        finally:
            server.shutdown()
            server.server_close()
        
    def test_fail(self):
        try:
            server = ThreadingTCPServer((ADDRESS, PORT), _TelnetRequestHandler)
            _, port = server.server_address
            self.port = port

            server.telnet_username = INVALID_USERNAME
            server.telnet_password = INVALID_PASSWORD

            thread = Thread(target=server.serve_forever)
            thread.start()

            ch = TelnetCredentialChecker()
            self.assertFalse(ch.check(ADDRESS, self.port))
        finally:
            server.shutdown()
            server.server_close()
    
    def test_nopassword(self):
        try:
            server = ThreadingTCPServer((ADDRESS, PORT), _TelnetNoUsernamePasswordRequestHandler)
            _, port = server.server_address
            self.port = port

            thread = Thread(target=server.serve_forever)
            thread.start()

            ch = TelnetCredentialChecker()
            self.assertTrue(ch.check(ADDRESS, self.port))
        finally:
            server.shutdown()
            server.server_close()
        
    def test_error(self):
        """Test what happens when TelnetCredsChecker is being run against something that is not telnet"""

        try:
            server = ThreadingTCPServer((ADDRESS, PORT), _NotTelnetRequestHandler)
            _, port = server.server_address
            self.port = port

            thread = Thread(target=server.serve_forever)
            thread.start()

            ch = TelnetCredentialChecker()
            self.assertFalse(ch.check(ADDRESS, self.port))
        finally:
            server.shutdown()
            server.server_close()
